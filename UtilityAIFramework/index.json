{
  "api/TinnyStudios.AIUtility.ActionMoveData.html": {
    "href": "api/TinnyStudios.AIUtility.ActionMoveData.html",
    "title": "Class ActionMoveData | Utility AI Framework",
    "keywords": "Class ActionMoveData The base data used by MoveSystemBase to set destination and properties. This isn't a scriptable object because DestinationTransform would not be able to reference a scene object. Inheritance Object ActionMoveData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax [Serializable] public class ActionMoveData Fields DestinationTransform Declaration public Transform DestinationTransform Field Value Type Description Transform Properties Declaration public ActionMoveProperties Properties Field Value Type Description ActionMoveProperties Required Declaration public bool Required Field Value Type Description Boolean"
  },
  "api/TinnyStudios.AIUtility.ActionPerformData.html": {
    "href": "api/TinnyStudios.AIUtility.ActionPerformData.html",
    "title": "Class ActionPerformData | Utility AI Framework",
    "keywords": "Class ActionPerformData The performing data for UtilityAction . Inheritance Object ActionPerformData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax [Serializable] public class ActionPerformData Fields Properties Declaration public ActionPerformProperties Properties Field Value Type Description ActionPerformProperties"
  },
  "api/TinnyStudios.AIUtility.Agent.AgentEvents.html": {
    "href": "api/TinnyStudios.AIUtility.Agent.AgentEvents.html",
    "title": "Class Agent.AgentEvents | Utility AI Framework",
    "keywords": "Class Agent.AgentEvents A set of Unity Events of all agent's changes. Useful for quickly prototyping. Inheritance Object Agent.AgentEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax [Serializable] public class AgentEvents Fields OnAbort Declaration public UnityEvent<IUtilityAction> OnAbort Field Value Type Description UnityEvent < IUtilityAction > OnActionSkipped Declaration public UnityEvent OnActionSkipped Field Value Type Description UnityEvent OnFailed Declaration public UnityEvent<IUtilityAction> OnFailed Field Value Type Description UnityEvent < IUtilityAction > OnIdle Declaration public UnityEvent OnIdle Field Value Type Description UnityEvent OnMove Declaration public UnityEvent<IUtilityAction> OnMove Field Value Type Description UnityEvent < IUtilityAction > OnMoveBegin Declaration public UnityEvent<IUtilityAction> OnMoveBegin Field Value Type Description UnityEvent < IUtilityAction > OnNoPlanFound Declaration public UnityEvent OnNoPlanFound Field Value Type Description UnityEvent OnPerform Declaration public UnityEvent<IUtilityAction> OnPerform Field Value Type Description UnityEvent < IUtilityAction > OnPerformBegin Declaration public UnityEvent<IUtilityAction> OnPerformBegin Field Value Type Description UnityEvent < IUtilityAction > OnPerformCompleted Declaration public UnityEvent<IUtilityAction> OnPerformCompleted Field Value Type Description UnityEvent < IUtilityAction > OnPlanFound Declaration public UnityEvent<IUtilityAction> OnPlanFound Field Value Type Description UnityEvent < IUtilityAction > OnStateChanged Declaration public UnityEvent<EAgentState, EAgentState> OnStateChanged Field Value Type Description UnityEvent < EAgentState , EAgentState >"
  },
  "api/TinnyStudios.AIUtility.Agent.html": {
    "href": "api/TinnyStudios.AIUtility.Agent.html",
    "title": "Class Agent | Utility AI Framework",
    "keywords": "Class Agent The brain of the Utility AI. It controls the states and uses the UtilityPlanner to find the best action. Inheritance Object Agent Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public class Agent : MonoBehaviour Fields Actions Declaration public List<IUtilityAction> Actions Field Value Type Description List < IUtilityAction > Events Declaration public Agent.AgentEvents Events Field Value Type Description Agent.AgentEvents MoveSystem Declaration public MoveSystemBase MoveSystem Field Value Type Description MoveSystemBase PauseRoutine Declaration public Coroutine PauseRoutine Field Value Type Description Coroutine State Declaration public EAgentState State Field Value Type Description EAgentState StateNames Declaration public Dictionary<EAgentState, string> StateNames Field Value Type Description Dictionary < EAgentState , String > UtilityPlanner Declaration public UtilityPlanner UtilityPlanner Field Value Type Description UtilityPlanner Properties Context Declaration public IAgentDataContext Context { get; } Property Value Type Description IAgentDataContext CurrentAction Declaration public IUtilityAction CurrentAction { get; } Property Value Type Description IUtilityAction Methods AbortPlan() Declaration public void AbortPlan() AddAction(UtilityAction) Add and set up the action. Declaration public void AddAction(UtilityAction utilityAction) Parameters Type Name Description UtilityAction utilityAction Awake() Declaration protected virtual void Awake() ExecutePlan() Declaration public void ExecutePlan() FindPlan() Find a plan and returns true if it exists. Declaration public bool FindPlan() Returns Type Description Boolean FixedUpdate() Declaration protected virtual void FixedUpdate() GetContext<T>() Declaration public T GetContext<T>() where T : IAgentDataContext Returns Type Description T Type Parameters Name Description T GoToState(EAgentState) Declaration public void GoToState(EAgentState state) Parameters Type Name Description EAgentState state Initialize() Declaration public virtual void Initialize() IsCurrentActionValid() Is the current action valid to use? Declaration public virtual bool IsCurrentActionValid() Returns Type Description Boolean LateUpdate() Declaration protected virtual void LateUpdate() PauseFor(Single, EAgentState, Action) Set UtilityPlanner pause to true and transition to idle for duration and then transition to planning. Declaration public virtual Coroutine PauseFor(float duration, EAgentState postState = EAgentState.Plan, Action postAction = null) Parameters Type Name Description Single duration EAgentState postState Action postAction Returns Type Description Coroutine Perform() Declaration public virtual void Perform() ReplaceActions(List<IUtilityAction>) Declaration public void ReplaceActions(List<IUtilityAction> actions) Parameters Type Name Description List < IUtilityAction > actions ResetCurrentAction() Declaration public void ResetCurrentAction() SearchForActionsInParent() Searches for actions available on the Agent. Declaration public virtual void SearchForActionsInParent() SetupAction(IUtilityAction) Declaration public virtual void SetupAction(IUtilityAction utilityAction) Parameters Type Name Description IUtilityAction utilityAction SetupActions() Declaration public virtual void SetupActions() StartPlan() Declaration protected virtual Coroutine StartPlan() Returns Type Description Coroutine Update() Declaration protected virtual void Update() Extension Methods AgentLogger.Log(Agent, String, String, EAgentLogType)"
  },
  "api/TinnyStudios.AIUtility.AgentLogger.html": {
    "href": "api/TinnyStudios.AIUtility.AgentLogger.html",
    "title": "Class AgentLogger | Utility AI Framework",
    "keywords": "Class AgentLogger A static logger extension to help filter out what logs to show or hide. Inheritance Object AgentLogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public static class AgentLogger Methods Log(Agent, String, String, EAgentLogType) Declaration public static void Log(this Agent agent, string title, string message, EAgentLogType logType) Parameters Type Name Description Agent agent String title String message EAgentLogType logType"
  },
  "api/TinnyStudios.AIUtility.Consideration.html": {
    "href": "api/TinnyStudios.AIUtility.Consideration.html",
    "title": "Class Consideration | Utility AI Framework",
    "keywords": "Class Consideration A scriptable object with a method GetScore returning a value between 0-1, this score is used by UtilityPlanner to determine if an action should be considered or not. Think of this as a question \"How Hungry am I?\" 1 = Hungry, 0 = Not Hungry. Inheritance Object Consideration BuySwordConsideration HasMonsterConsideration HasWeaponConsideration HasWorkConsideration HungerConsideration MoneyConsideration SleepinessConsideration SpellElementConsideration SpellQuantityConsideration Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public abstract class Consideration : ScriptableObject Fields Description Declaration public string Description Field Value Type Description String ResponseCurve Declaration public AnimationCurve ResponseCurve Field Value Type Description AnimationCurve Methods GetScore(Agent) Return between 0 and 1. Declaration public abstract float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single GetSimulatedScore(Single) Used in Editor view to get a simulated score. Helpful for understanding what these curve responses actually output. Declaration public virtual float GetSimulatedScore(float value) Parameters Type Name Description Single value Returns Type Description Single"
  },
  "api/TinnyStudios.AIUtility.EActionStatus.html": {
    "href": "api/TinnyStudios.AIUtility.EActionStatus.html",
    "title": "Enum EActionStatus | Utility AI Framework",
    "keywords": "Enum EActionStatus The state the action is in. This is returned by UtilityAction Perform method. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public enum EActionStatus Fields Name Description Completed Return Completed so the action ends. Failed Return Failed to cancel your action perform. i.e in the process, you realized it's not a success. Moving Is moving towards destination NotStarted Has not been chosen Running The action is performing, return this in Perform method to keep going"
  },
  "api/TinnyStudios.AIUtility.EAgentLogType.html": {
    "href": "api/TinnyStudios.AIUtility.EAgentLogType.html",
    "title": "Enum EAgentLogType | Utility AI Framework",
    "keywords": "Enum EAgentLogType The type of logs we can filter by UtilityPlanner log types. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax [Flags] public enum EAgentLogType Fields Name Description Abort Completed Perform Plan Skip Transition"
  },
  "api/TinnyStudios.AIUtility.EAgentState.html": {
    "href": "api/TinnyStudios.AIUtility.EAgentState.html",
    "title": "Enum EAgentState | Utility AI Framework",
    "keywords": "Enum EAgentState The state the Agent is currently in. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public enum EAgentState Fields Name Description Aborting The agent wants to abort the current action. This will take effect the next frame. Idle The agent is not doing anything here. This is a good place for idle animation Moving The agent found a plan/action that needs to move. Performing The agent is now performing the action, this can be over time or immediately depending on UtilityAction Plan The agent has begun planning and may find a good action."
  },
  "api/TinnyStudios.AIUtility.Editor.AgentDrawer.html": {
    "href": "api/TinnyStudios.AIUtility.Editor.AgentDrawer.html",
    "title": "Class AgentDrawer | Utility AI Framework",
    "keywords": "Class AgentDrawer The custom editor for Agent This is mostly use for debugging purposes. Exposes a few buttons to change the Agent's current plan such as aborting. It also shows a list of actions and the scores. Inheritance Object AgentDrawer Namespace : TinnyStudios.AIUtility.Editor Assembly : UtilityAIFramework.dll Syntax public class AgentDrawer : UnityEditor.Editor Fields ShowInfo Declaration public bool ShowInfo Field Value Type Description Boolean SmallLabelSize Declaration public const float SmallLabelSize = 100F Field Value Type Description Single Properties GeneralStyle Declaration public GUIStyle GeneralStyle { get; } Property Value Type Description GUIStyle myFoldoutStyle Declaration public GUIStyle myFoldoutStyle { get; } Property Value Type Description GUIStyle Methods FormatLabelHorizontal(String[]) Declaration public void FormatLabelHorizontal(params string[] labels) Parameters Type Name Description String [] labels OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TinnyStudios.AIUtility.Editor.ConsiderationDrawer.html": {
    "href": "api/TinnyStudios.AIUtility.Editor.ConsiderationDrawer.html",
    "title": "Class ConsiderationDrawer | Utility AI Framework",
    "keywords": "Class ConsiderationDrawer A customer editor for considerations. A useful debugging section was added to see the output of the response curve by using the simulated value slider. Inheritance Object ConsiderationDrawer Namespace : TinnyStudios.AIUtility.Editor Assembly : UtilityAIFramework.dll Syntax public class ConsiderationDrawer : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TinnyStudios.AIUtility.Editor.html": {
    "href": "api/TinnyStudios.AIUtility.Editor.html",
    "title": "Namespace TinnyStudios.AIUtility.Editor | Utility AI Framework",
    "keywords": "Namespace TinnyStudios.AIUtility.Editor Classes AgentDrawer The custom editor for Agent This is mostly use for debugging purposes. Exposes a few buttons to change the Agent's current plan such as aborting. It also shows a list of actions and the scores. ConsiderationDrawer A customer editor for considerations. A useful debugging section was added to see the output of the response curve by using the simulated value slider. StringExtensions A set of string extensions. Mostly around Rich Texts."
  },
  "api/TinnyStudios.AIUtility.Editor.StringExtensions.html": {
    "href": "api/TinnyStudios.AIUtility.Editor.StringExtensions.html",
    "title": "Class StringExtensions | Utility AI Framework",
    "keywords": "Class StringExtensions A set of string extensions. Mostly around Rich Texts. Inheritance Object StringExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Editor Assembly : UtilityAIFramework.dll Syntax public static class StringExtensions Methods ToBold(String) Declaration public static string ToBold(this string text) Parameters Type Name Description String text Returns Type Description String ToColor(String, Color) Declaration public static string ToColor(this string text, Color color) Parameters Type Name Description String text Color color Returns Type Description String ToRichText(String, String, String) Declaration public static string ToRichText(this string text, string tag, string value = \"\") Parameters Type Name Description String text String tag String value Returns Type Description String"
  },
  "api/TinnyStudios.AIUtility.EUpdateType.html": {
    "href": "api/TinnyStudios.AIUtility.EUpdateType.html",
    "title": "Enum EUpdateType | Utility AI Framework",
    "keywords": "Enum EUpdateType Decides how the Agent update is handled. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public enum EUpdateType Fields Name Description FixedUpdate Unity's Fixed Update loop LateUpdate Unity's Late Update loop Script Basically this means you will handle it yourself via script. Update Unity's update loop"
  },
  "api/TinnyStudios.AIUtility.html": {
    "href": "api/TinnyStudios.AIUtility.html",
    "title": "Namespace TinnyStudios.AIUtility | Utility AI Framework",
    "keywords": "Namespace TinnyStudios.AIUtility Classes ActionMoveData The base data used by MoveSystemBase to set destination and properties. This isn't a scriptable object because DestinationTransform would not be able to reference a scene object. ActionPerformData The performing data for UtilityAction . Agent The brain of the Utility AI. It controls the states and uses the UtilityPlanner to find the best action. Agent.AgentEvents A set of Unity Events of all agent's changes. Useful for quickly prototyping. AgentLogger A static logger extension to help filter out what logs to show or hide. Consideration A scriptable object with a method GetScore returning a value between 0-1, this score is used by UtilityPlanner to determine if an action should be considered or not. Think of this as a question \"How Hungry am I?\" 1 = Hungry, 0 = Not Hungry. MoveSystemBase The base class for the move system. This lets the agent choose which system to use. You have to implement your own, see MoveSystemNavMeshExample for an example. MoveSystemNavMeshExample StopwatchWatcher An implementation of TimeWatcher as a time counter using Stopwatch. This is used to track how long as action has performed for. TimeWatcher This is used to track how long as action has performed for. UtilityAction The base implementation for Utility Action to be used by the planner. See the interface IUtilityAction for detailed comments. UtilityAction.ActionEvents A set of Unity Events that the action can go through. Useful for quick prototypes. UtilityPlanner Finds the best action based on a list of considerations from Agent Interfaces IAgentDataContext An interface for inferring and finding agent data context. The agent data context can be any data, it just gets cast and cached to its concrete type. IUtilityAction The base implementation for Utility Action to be used by the planner. Enums EActionStatus The state the action is in. This is returned by UtilityAction Perform method. EAgentLogType The type of logs we can filter by UtilityPlanner log types. EAgentState The state the Agent is currently in. EUpdateType Decides how the Agent update is handled."
  },
  "api/TinnyStudios.AIUtility.IAgentDataContext.html": {
    "href": "api/TinnyStudios.AIUtility.IAgentDataContext.html",
    "title": "Interface IAgentDataContext | Utility AI Framework",
    "keywords": "Interface IAgentDataContext An interface for inferring and finding agent data context. The agent data context can be any data, it just gets cast and cached to its concrete type. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public interface IAgentDataContext"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.AddActionExample.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.AddActionExample.html",
    "title": "Class AddActionExample | Utility AI Framework",
    "keywords": "Class AddActionExample This class just shows an example of how you can add actions at runtime. Inheritance Object AddActionExample Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class AddActionExample : MonoBehaviour Fields Action Declaration public UtilityAction Action Field Value Type Description UtilityAction Actions Declaration public List<IUtilityAction> Actions Field Value Type Description List < IUtilityAction > ActionsToReplace Declaration public List<UtilityAction> ActionsToReplace Field Value Type Description List < UtilityAction > Agent Declaration public Agent Agent Field Value Type Description Agent"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.BuySwordAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.BuySwordAction.html",
    "title": "Class BuySwordAction | Utility AI Framework",
    "keywords": "Class BuySwordAction Buys the sword. In this case, sets Inventory.HasWeapon to true. Inheritance Object UtilityAction BuySwordAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.OnMove(MoveSystemBase) UtilityAction.Setup(Agent) UtilityAction.InitializeDynamicConsideration() UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.OnMoveStarted(MoveSystemBase) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class BuySwordAction : UtilityAction, IUtilityAction Methods OnPerformByDurationCompleted(Agent) Declaration protected override void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent Overrides UtilityAction.OnPerformByDurationCompleted(Agent) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.BuySwordConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.BuySwordConsideration.html",
    "title": "Class BuySwordConsideration | Utility AI Framework",
    "keywords": "Class BuySwordConsideration Consider if there is a monster then you would want to buy a sword. This is a very concrete implementation, you could reuse HasMonsterConsideration Inheritance Object Consideration BuySwordConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class BuySwordConsideration : Consideration Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.EatAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.EatAction.html",
    "title": "Class EatAction | Utility AI Framework",
    "keywords": "Class EatAction Sets hunger to 0 when performed. Inheritance Object UtilityAction EatAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.OnMove(MoveSystemBase) UtilityAction.Setup(Agent) UtilityAction.InitializeDynamicConsideration() UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.OnMoveStarted(MoveSystemBase) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class EatAction : UtilityAction, IUtilityAction Methods OnPerformByDurationCompleted(Agent) Declaration protected override void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent Overrides UtilityAction.OnPerformByDurationCompleted(Agent) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.EntityBase.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.EntityBase.html",
    "title": "Class EntityBase | Utility AI Framework",
    "keywords": "Class EntityBase The base class for all entities / living things. Inheritance Object EntityBase Monster Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public abstract class EntityBase : MonoBehaviour"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.ExampleDataContext.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.ExampleDataContext.html",
    "title": "Class ExampleDataContext | Utility AI Framework",
    "keywords": "Class ExampleDataContext An example implementation of IAgentDataContext concretely defining the game data for the farmer hero. This is accessed by all actions and consideration. You do not need to do it this way if your game has a different way of injecting dependencies. Inheritance Object ExampleDataContext Implements IAgentDataContext Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class ExampleDataContext : MonoBehaviour, IAgentDataContext Fields HungerWatcher Declaration public StatWatcher HungerWatcher Field Value Type Description StatWatcher Inventory Declaration public Inventory Inventory Field Value Type Description Inventory MonsterManager Declaration public MonsterManager MonsterManager Field Value Type Description MonsterManager SleepinessWatcher Declaration public StatWatcher SleepinessWatcher Field Value Type Description StatWatcher Stats Declaration public Stats Stats Field Value Type Description Stats TreeObjectManager Declaration public TreeObjectManager TreeObjectManager Field Value Type Description TreeObjectManager Implements IAgentDataContext"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.GiveSwordAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.GiveSwordAction.html",
    "title": "Class GiveSwordAction | Utility AI Framework",
    "keywords": "Class GiveSwordAction This action gives a sword to another agent. Inheritance Object UtilityAction GiveSwordAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.Setup(Agent) UtilityAction.InitializeDynamicConsideration() UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.OnMoveStarted(MoveSystemBase) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) UtilityAction.OnPerformByDurationCompleted(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class GiveSwordAction : UtilityAction, IUtilityAction Fields HeroAgent Declaration public Agent HeroAgent Field Value Type Description Agent Properties HeroAgentContext Declaration public ExampleDataContext HeroAgentContext { get; } Property Value Type Description ExampleDataContext Methods IsAvailable() In this case, we override IsAvailable because we don't want to give a weapon to the agent if he already has one. Other alternative is we actually deduct the number of swords this agent carries and use it in Consideration. But this is simple and illustrate a usage for IsAvailable that is easy to read. Declaration public override bool IsAvailable() Returns Type Description Boolean Overrides UtilityAction.IsAvailable() OnMove(MoveSystemBase) Declaration public override void OnMove(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem Overrides UtilityAction.OnMove(MoveSystemBase) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasMonsterConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasMonsterConsideration.html",
    "title": "Class HasMonsterConsideration | Utility AI Framework",
    "keywords": "Class HasMonsterConsideration Considers if there are any monsters around. Inheritance Object Consideration HasMonsterConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class HasMonsterConsideration : Consideration Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasWeaponConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasWeaponConsideration.html",
    "title": "Class HasWeaponConsideration | Utility AI Framework",
    "keywords": "Class HasWeaponConsideration Considers if the agent has a weapon already or not. Inheritance Object Consideration HasWeaponConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class HasWeaponConsideration : Consideration Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasWorkConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HasWorkConsideration.html",
    "title": "Class HasWorkConsideration | Utility AI Framework",
    "keywords": "Class HasWorkConsideration Consider if there are any trees remaining. Inheritance Object Consideration HasWorkConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class HasWorkConsideration : Consideration Methods Bind(TreeObjectManager) Shows an example of how to inject TreeObjectManager Declaration public void Bind(TreeObjectManager treeObjectManager) Parameters Type Name Description TreeObjectManager treeObjectManager GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.html",
    "title": "Namespace TinnyStudios.AIUtility.Impl.Examples.FarmerHero | Utility AI Framework",
    "keywords": "Namespace TinnyStudios.AIUtility.Impl.Examples.FarmerHero Classes AddActionExample This class just shows an example of how you can add actions at runtime. BuySwordAction Buys the sword. In this case, sets Inventory.HasWeapon to true. BuySwordConsideration Consider if there is a monster then you would want to buy a sword. This is a very concrete implementation, you could reuse HasMonsterConsideration EatAction Sets hunger to 0 when performed. EntityBase The base class for all entities / living things. ExampleDataContext An example implementation of IAgentDataContext concretely defining the game data for the farmer hero. This is accessed by all actions and consideration. You do not need to do it this way if your game has a different way of injecting dependencies. GiveSwordAction This action gives a sword to another agent. HasMonsterConsideration Considers if there are any monsters around. HasWeaponConsideration Considers if the agent has a weapon already or not. HasWorkConsideration Consider if there are any trees remaining. HungerConsideration Consider if you a hungry. Inventory A very simple implementation of an inventory for the example. MoneyConsideration Monster Unlike a TreeObject, Monster wants to be an entity base as well so here we use the IManagerObject interface instead. This will need to handle the binding process by itself which is just about keeping track of the monster manager.. MonsterManager In this example, the monster manager instantiate 1 every 10s SleepAction When performed, sets Sleepiness to 0. SleepinessConsideration Considers how sleepy an agent is. Stats The stats used in the farmer hero example. StatWatcher Configures a stat over time. This is used for increasing Hunger and Sleepiness. SwordFightAction Attacks and Destroy a monster immediately when performed. TreeObject A component to be attached to an object to define it as a tree. Place the game object under a parent with TreeObjectManager and it'll be added to the manager. TreeObjectManager WorkAction When performed, cuts a tree. Earns Money and Wood immediately."
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HungerConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.HungerConsideration.html",
    "title": "Class HungerConsideration | Utility AI Framework",
    "keywords": "Class HungerConsideration Consider if you a hungry. Inheritance Object Consideration HungerConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class HungerConsideration : Consideration Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Inventory.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Inventory.html",
    "title": "Class Inventory | Utility AI Framework",
    "keywords": "Class Inventory A very simple implementation of an inventory for the example. Inheritance Object Inventory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax [Serializable] public class Inventory Fields HasWeapon Declaration public bool HasWeapon Field Value Type Description Boolean Money Declaration public float Money Field Value Type Description Single Wood Declaration public int Wood Field Value Type Description Int32"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.MoneyConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.MoneyConsideration.html",
    "title": "Class MoneyConsideration | Utility AI Framework",
    "keywords": "Class MoneyConsideration Inheritance Object Consideration MoneyConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class MoneyConsideration : Consideration Fields Factor Declaration public float Factor Field Value Type Description Single Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Monster.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Monster.html",
    "title": "Class Monster | Utility AI Framework",
    "keywords": "Class Monster Unlike a TreeObject, Monster wants to be an entity base as well so here we use the IManagerObject interface instead. This will need to handle the binding process by itself which is just about keeping track of the monster manager.. Inheritance Object EntityBase Monster Implements IManagerObject < MonsterManager > Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class Monster : EntityBase Methods Bind(MonsterManager) Declaration public void Bind(MonsterManager manager) Parameters Type Name Description MonsterManager manager Die() Declaration public void Die() Implements IManagerObject<>"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.MonsterManager.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.MonsterManager.html",
    "title": "Class MonsterManager | Utility AI Framework",
    "keywords": "Class MonsterManager In this example, the monster manager instantiate 1 every 10s Inheritance Object MonsterManager Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class MonsterManager : ObjectManager<Monster, MonsterManager> Fields Max Declaration public int Max Field Value Type Description Int32 SpawnInterval Declaration public float SpawnInterval Field Value Type Description Single Stopwatch Declaration public Stopwatch Stopwatch Field Value Type Description Stopwatch"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SleepAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SleepAction.html",
    "title": "Class SleepAction | Utility AI Framework",
    "keywords": "Class SleepAction When performed, sets Sleepiness to 0. Inheritance Object UtilityAction SleepAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.OnMove(MoveSystemBase) UtilityAction.Setup(Agent) UtilityAction.InitializeDynamicConsideration() UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.OnMoveStarted(MoveSystemBase) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class SleepAction : UtilityAction, IUtilityAction Methods OnPerformByDurationCompleted(Agent) Declaration protected override void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent Overrides UtilityAction.OnPerformByDurationCompleted(Agent) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SleepinessConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SleepinessConsideration.html",
    "title": "Class SleepinessConsideration | Utility AI Framework",
    "keywords": "Class SleepinessConsideration Considers how sleepy an agent is. Inheritance Object Consideration SleepinessConsideration Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class SleepinessConsideration : Consideration Methods GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent)"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Stats.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.Stats.html",
    "title": "Class Stats | Utility AI Framework",
    "keywords": "Class Stats The stats used in the farmer hero example. Inheritance Object Stats Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax [Serializable] public class Stats Fields Hunger Declaration public float Hunger Field Value Type Description Single Sleepiness Declaration public float Sleepiness Field Value Type Description Single"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.StatWatcher.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.StatWatcher.html",
    "title": "Class StatWatcher | Utility AI Framework",
    "keywords": "Class StatWatcher Configures a stat over time. This is used for increasing Hunger and Sleepiness. Inheritance Object StatWatcher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax [Serializable] public class StatWatcher Fields IncreaseAmount Declaration public float IncreaseAmount Field Value Type Description Single IncreaseInterval Declaration public float IncreaseInterval Field Value Type Description Single OnCompleted Declaration public Action OnCompleted Field Value Type Description Action Methods Start() Declaration public void Start() Update(ref Single) Declaration public void Update(ref float value) Parameters Type Name Description Single value"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SwordFightAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.SwordFightAction.html",
    "title": "Class SwordFightAction | Utility AI Framework",
    "keywords": "Class SwordFightAction Attacks and Destroy a monster immediately when performed. Inheritance Object UtilityAction SwordFightAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.Setup(Agent) UtilityAction.InitializeDynamicConsideration() UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class SwordFightAction : UtilityAction, IUtilityAction Properties MonsterManager Declaration public MonsterManager MonsterManager { get; } Property Value Type Description MonsterManager Methods OnMove(MoveSystemBase) Declaration public override void OnMove(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem Overrides UtilityAction.OnMove(MoveSystemBase) OnMoveStarted(MoveSystemBase) Declaration public override void OnMoveStarted(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem Overrides UtilityAction.OnMoveStarted(MoveSystemBase) OnPerformByDurationCompleted(Agent) Declaration protected override void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent Overrides UtilityAction.OnPerformByDurationCompleted(Agent) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.TreeObject.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.TreeObject.html",
    "title": "Class TreeObject | Utility AI Framework",
    "keywords": "Class TreeObject A component to be attached to an object to define it as a tree. Place the game object under a parent with TreeObjectManager and it'll be added to the manager. Inheritance Object TreeObject Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class TreeObject : ManagerObject<TreeObjectManager> Fields Taken Declaration public bool Taken Field Value Type Description Boolean Methods OnChopped() Declaration public void OnChopped()"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.TreeObjectManager.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.TreeObjectManager.html",
    "title": "Class TreeObjectManager | Utility AI Framework",
    "keywords": "Class TreeObjectManager Inheritance Object TreeObjectManager Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class TreeObjectManager : ObjectManager<TreeObject, TreeObjectManager>"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.WorkAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.FarmerHero.WorkAction.html",
    "title": "Class WorkAction | Utility AI Framework",
    "keywords": "Class WorkAction When performed, cuts a tree. Earns Money and Wood immediately. Inheritance Object UtilityAction WorkAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.Setup(Agent) UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnConsiderationCheck(Consideration) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.FarmerHero Assembly : UtilityAIFramework.dll Syntax public class WorkAction : UtilityAction, IUtilityAction Fields TreeObjectManager Declaration public TreeObjectManager TreeObjectManager Field Value Type Description TreeObjectManager Methods InitializeDynamicConsideration() This shows a way of dynamically adding a consideration and binding / injecting any required dependencies. Declaration public override void InitializeDynamicConsideration() Overrides UtilityAction.InitializeDynamicConsideration() OnMove(MoveSystemBase) Declaration public override void OnMove(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem Overrides UtilityAction.OnMove(MoveSystemBase) OnMoveStarted(MoveSystemBase) Declaration public override void OnMoveStarted(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem Overrides UtilityAction.OnMoveStarted(MoveSystemBase) OnPerformByDurationCompleted(Agent) Declaration protected override void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent Overrides UtilityAction.OnPerformByDurationCompleted(Agent) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.ElementTrait.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.ElementTrait.html",
    "title": "Class ElementTrait | Utility AI Framework",
    "keywords": "Class ElementTrait Determines the pros and cons of an element. Inheritance Object ElementTrait Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class ElementTrait Constructors ElementTrait(EElementType, EElementType, EElementType) Declaration public ElementTrait(EElementType type, EElementType weakTo, EElementType strongTo) Parameters Type Name Description EElementType type EElementType weakTo EElementType strongTo Fields StrongTo Declaration public EElementType StrongTo Field Value Type Description EElementType Type Declaration public EElementType Type Field Value Type Description EElementType WeakTo Declaration public EElementType WeakTo Field Value Type Description EElementType Methods GetEffectiveness(EElementType) Declaration public float GetEffectiveness(EElementType type) Parameters Type Name Description EElementType type Returns Type Description Single"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.html",
    "title": "Namespace TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell | Utility AI Framework",
    "keywords": "Namespace TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Classes ElementTrait Determines the pros and cons of an element. RuntimeSpellAttackData The runtime data of the spell attack. This is mutable, meaning its max value can be changed. This pattern just save us from having to clone SpellAttackData scriptable object. SpellAttackAction The action that choose a spell from RuntimeData Each move will increase the Used Count. SpellAttackData A scriptable object containing the element type of the attack. Just an example, no strength or abilities included. SpellElementConsideration Considers the effectiveness of the attack and receiver's element. SpellQuantityConsideration Considers if a spell has any uses left. TurnBaseCharacter A character in the turn base example. This is used to tag a character's element type. TurnBasedGameManager An example game manager for a turn base agent. This is not production code so please use it just as an example on a starting point on understanding how to execute and set up a turn based Agent. TurnBaseSpellGameContext The Game Context data for each agent in the game. Here GameManager is manually injected by Unity's interface. You could have your game manager pass all the dependencies down instead. Up to you."
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.RuntimeSpellAttackData.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.RuntimeSpellAttackData.html",
    "title": "Class RuntimeSpellAttackData | Utility AI Framework",
    "keywords": "Class RuntimeSpellAttackData The runtime data of the spell attack. This is mutable, meaning its max value can be changed. This pattern just save us from having to clone SpellAttackData scriptable object. Inheritance Object RuntimeSpellAttackData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax [Serializable] public class RuntimeSpellAttackData Fields SpellAttackData Declaration public SpellAttackData SpellAttackData Field Value Type Description SpellAttackData Used Declaration public int Used Field Value Type Description Int32"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellAttackAction.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellAttackAction.html",
    "title": "Class SpellAttackAction | Utility AI Framework",
    "keywords": "Class SpellAttackAction The action that choose a spell from RuntimeData Each move will increase the Used Count. Inheritance Object UtilityAction SpellAttackAction Implements IUtilityAction Inherited Members UtilityAction.Name UtilityAction.Weight UtilityAction.MinScore UtilityAction.Considerations UtilityAction.PerformData UtilityAction.MoveData UtilityAction.Events UtilityAction.State UtilityAction.Agent UtilityAction.Score UtilityAction.Initialized UtilityAction.IUtilityAction.Weight UtilityAction.IUtilityAction.MoveData UtilityAction.IUtilityAction.Name UtilityAction.IUtilityAction.State UtilityAction.IUtilityAction.Events UtilityAction.IUtilityAction.Considerations UtilityAction.SetScore(Single) UtilityAction.IsAvailable() UtilityAction.OnMove(MoveSystemBase) UtilityAction.Setup(Agent) UtilityAction.AddConsideration(Consideration) UtilityAction.RemoveConsideration(Consideration) UtilityAction.OnMoveStarted(MoveSystemBase) UtilityAction.TimeWatch UtilityAction.FoldOutEnabled UtilityAction.OnReachedDestination() UtilityAction.SetState(EActionStatus) UtilityAction.ReachedPerformDuration UtilityAction.PerformByDuration(Agent) UtilityAction.OnPerformByDurationCompleted(Agent) Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class SpellAttackAction : UtilityAction, IUtilityAction Fields RuntimeData Declaration public RuntimeSpellAttackData RuntimeData Field Value Type Description RuntimeSpellAttackData Methods InitializeDynamicConsideration() Dyamically Create a consideration for this spell type and inject spell attack data through. You can also manually make a spell consideration but this is handy if you need to dynamically inject, see OnConsiderationCheck method. Declaration public override void InitializeDynamicConsideration() Overrides UtilityAction.InitializeDynamicConsideration() OnConsiderationCheck(Consideration) Allows you to bind runtime data that has changed. In this case, we are passing in RuntimeData which would allow the consideration to consider if this action can be used anymore. Declaration public override void OnConsiderationCheck(Consideration consideration) Parameters Type Name Description Consideration consideration Overrides UtilityAction.OnConsiderationCheck(Consideration) Perform(Agent) Declaration public override EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus Overrides UtilityAction.Perform(Agent) Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellAttackData.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellAttackData.html",
    "title": "Class SpellAttackData | Utility AI Framework",
    "keywords": "Class SpellAttackData A scriptable object containing the element type of the attack. Just an example, no strength or abilities included. Inheritance Object SpellAttackData Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class SpellAttackData : ScriptableObject Fields ElementType Declaration public EElementType ElementType Field Value Type Description EElementType MaxUse Number of times you can use this move as a base. Declaration public int MaxUse Field Value Type Description Int32"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellElementConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellElementConsideration.html",
    "title": "Class SpellElementConsideration | Utility AI Framework",
    "keywords": "Class SpellElementConsideration Considers the effectiveness of the attack and receiver's element. Inheritance Object Consideration SpellElementConsideration Implements IDataBind < RuntimeSpellAttackData > Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class SpellElementConsideration : Consideration Methods Bind(RuntimeSpellAttackData) Bind/Inject the Action's Spell Attack Data to this consideration as an action spell data can change at runtime. Declaration public void Bind(RuntimeSpellAttackData runtimeSpellData) Parameters Type Name Description RuntimeSpellAttackData runtimeSpellData GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent) Implements IDataBind<>"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellQuantityConsideration.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.SpellQuantityConsideration.html",
    "title": "Class SpellQuantityConsideration | Utility AI Framework",
    "keywords": "Class SpellQuantityConsideration Considers if a spell has any uses left. Inheritance Object Consideration SpellQuantityConsideration Implements IDataBind < RuntimeSpellAttackData > Inherited Members Consideration.Description Consideration.ResponseCurve Consideration.GetSimulatedScore(Single) Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class SpellQuantityConsideration : Consideration Methods Bind(RuntimeSpellAttackData) Bind/Inject the Action's Spell Attack Data to this consideration as an action spell data can change at runtime. Declaration public void Bind(RuntimeSpellAttackData runtimeSpellData) Parameters Type Name Description RuntimeSpellAttackData runtimeSpellData GetScore(Agent) Declaration public override float GetScore(Agent agent) Parameters Type Name Description Agent agent Returns Type Description Single Overrides Consideration.GetScore(Agent) Implements IDataBind<>"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBaseCharacter.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBaseCharacter.html",
    "title": "Class TurnBaseCharacter | Utility AI Framework",
    "keywords": "Class TurnBaseCharacter A character in the turn base example. This is used to tag a character's element type. Inheritance Object TurnBaseCharacter Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class TurnBaseCharacter : MonoBehaviour Fields ElementType Declaration public EElementType ElementType Field Value Type Description EElementType Hp Declaration public float Hp Field Value Type Description Single HpFillImage Declaration public Image HpFillImage Field Value Type Description Image MaxHp Declaration public float MaxHp Field Value Type Description Single Properties IsDead Declaration public bool IsDead { get; } Property Value Type Description Boolean Methods TakeDamage(Single) Declaration public void TakeDamage(float damage) Parameters Type Name Description Single damage"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBasedGameManager.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBasedGameManager.html",
    "title": "Class TurnBasedGameManager | Utility AI Framework",
    "keywords": "Class TurnBasedGameManager An example game manager for a turn base agent. This is not production code so please use it just as an example on a starting point on understanding how to execute and set up a turn based Agent. Inheritance Object TurnBasedGameManager Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class TurnBasedGameManager : MonoBehaviour Fields Agent Declaration public Agent Agent Field Value Type Description Agent DecisionLabel Declaration public TextMeshProUGUI DecisionLabel Field Value Type Description TextMeshProUGUI ElementTraitTable A table for weakness and strength for each element types. Declaration public static Dictionary<EElementType, ElementTrait> ElementTraitTable Field Value Type Description Dictionary < EElementType , ElementTrait > TurnCount Declaration public int TurnCount Field Value Type Description Int32 Methods Choose(SpellAttackAction) When a spell action performs, it calls this method which then evaluate all the result of the attack. Declaration public void Choose(SpellAttackAction spellAttackAction) Parameters Type Name Description SpellAttackAction spellAttackAction ChooseAttack() Choose attack will find a plan and check if its valid and then execute the plan immediately. This is called by a UnityEvent on the Attack! button. Declaration public void ChooseAttack()"
  },
  "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBaseSpellGameContext.html": {
    "href": "api/TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell.TurnBaseSpellGameContext.html",
    "title": "Class TurnBaseSpellGameContext | Utility AI Framework",
    "keywords": "Class TurnBaseSpellGameContext The Game Context data for each agent in the game. Here GameManager is manually injected by Unity's interface. You could have your game manager pass all the dependencies down instead. Up to you. Inheritance Object TurnBaseSpellGameContext Implements IAgentDataContext Namespace : TinnyStudios.AIUtility.Impl.Examples.TurnBasedSpell Assembly : UtilityAIFramework.dll Syntax public class TurnBaseSpellGameContext : MonoBehaviour, IAgentDataContext Fields Foe Declaration public TurnBaseCharacter Foe Field Value Type Description TurnBaseCharacter GameManager Declaration public TurnBasedGameManager GameManager Field Value Type Description TurnBasedGameManager Self Declaration public TurnBaseCharacter Self Field Value Type Description TurnBaseCharacter Implements IAgentDataContext"
  },
  "api/TinnyStudios.AIUtility.IUtilityAction.html": {
    "href": "api/TinnyStudios.AIUtility.IUtilityAction.html",
    "title": "Interface IUtilityAction | Utility AI Framework",
    "keywords": "Interface IUtilityAction The base implementation for Utility Action to be used by the planner. Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public interface IUtilityAction Properties Considerations The list of considerations. Think of a consideration as a question of how much you want to do something. i.e a consideration for EatAction is how hungry are you? If you are very hungry, it will return 1. The list of consideration total score average is the Action's Score. Declaration List<Consideration> Considerations { get; } Property Value Type Description List < Consideration > Events A list of unity events for ease of use. Declaration UtilityAction.ActionEvents Events { get; } Property Value Type Description UtilityAction.ActionEvents FoldOutEnabled To show more info, only used for editor purposes. Declaration bool FoldOutEnabled { get; set; } Property Value Type Description Boolean Initialized Set up has been completed so we won't do it a second time. Declaration bool Initialized { get; set; } Property Value Type Description Boolean MoveData The Action Move Data stores useful data to pass to the Move System. Declaration ActionMoveData MoveData { get; } Property Value Type Description ActionMoveData Name The name of the action, mostly used for debugging purposes. Declaration string Name { get; } Property Value Type Description String Score The last evaluated Score of the Action. The higher score will get chosen by the Planner. Declaration float Score { get; } Property Value Type Description Single State The last known state of the action. Useful for debugging purposes. Declaration EActionStatus State { get; } Property Value Type Description EActionStatus TimeWatch Stores the time elapsed of the performing action. Declaration TimeWatcher TimeWatch { get; } Property Value Type Description TimeWatcher Weight The action score is multiplied by the weight. This determines its max score output and can be use for classifying priorities. Declaration float Weight { get; } Property Value Type Description Single Methods IsAvailable() This is checked before the action is scored. This is useful for simply telling an action to not occur via code. It's basically a coded approach to considerations. Declaration bool IsAvailable() Returns Type Description Boolean OnConsiderationCheck(Consideration) This is called just before a consideration is checked. This gives time for us to bind any neccessary data. Declaration void OnConsiderationCheck(Consideration consideration) Parameters Type Name Description Consideration consideration OnMove(MoveSystemBase) Called Once Per Frame. Assign destination to Destination Transform by default. Override this method to change the target destination, i.e a location without a transform. You can use this to override Move System or simply modify its speed. Transform is kept default for convenience sake Declaration void OnMove(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem OnMoveStarted(MoveSystemBase) Is called when the Agent just started moving to its target to perform the action. Declaration void OnMoveStarted(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem OnReachedDestination() Is called when the Agent reached the destination. This is not called if MoveData Required field is not enabled. Declaration void OnReachedDestination() Perform(Agent) Is called when the action can be executed. i.e within range. Returning EActionStatus.Completed will end the action and the agent will find a new plan. Returning EActionStatus.Running will continue. Returning EActionStatus.Failed will allow to Agent to know to Abort the action. Declaration EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus SetScore(Single) Declaration void SetScore(float getRescaleScore) Parameters Type Name Description Single getRescaleScore SetState(EActionStatus) Sets the ActionStatus of the Agent. This does not transition and is used more for tracking. Declaration void SetState(EActionStatus state) Parameters Type Name Description EActionStatus state Setup(Agent) Sets up the action, useful for any initialization. Declaration void Setup(Agent agent) Parameters Type Name Description Agent agent"
  },
  "api/TinnyStudios.AIUtility.MoveSystemBase.html": {
    "href": "api/TinnyStudios.AIUtility.MoveSystemBase.html",
    "title": "Class MoveSystemBase | Utility AI Framework",
    "keywords": "Class MoveSystemBase The base class for the move system. This lets the agent choose which system to use. You have to implement your own, see MoveSystemNavMeshExample for an example. Inheritance Object MoveSystemBase MoveSystemNavMeshExample Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public abstract class MoveSystemBase : MonoBehaviour Properties DestinationTransform Declaration public Transform DestinationTransform { get; } Property Value Type Description Transform Methods ReachedDestination() Declaration public abstract bool ReachedDestination() Returns Type Description Boolean SetDestination(Transform) Declaration public void SetDestination(Transform destinationTransform) Parameters Type Name Description Transform destinationTransform SetDestination(Vector3) Declaration public abstract void SetDestination(Vector3 destination) Parameters Type Name Description Vector3 destination SetProperties(ActionMoveData) Declaration public abstract void SetProperties(ActionMoveData moveData) Parameters Type Name Description ActionMoveData moveData Stop() Declaration public abstract void Stop()"
  },
  "api/TinnyStudios.AIUtility.MoveSystemNavMeshExample.html": {
    "href": "api/TinnyStudios.AIUtility.MoveSystemNavMeshExample.html",
    "title": "Class MoveSystemNavMeshExample | Utility AI Framework",
    "keywords": "Class MoveSystemNavMeshExample Inheritance Object MoveSystemBase MoveSystemNavMeshExample Inherited Members MoveSystemBase.DestinationTransform MoveSystemBase.SetDestination(Transform) Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public class MoveSystemNavMeshExample : MoveSystemBase Fields NavAgent Declaration public NavMeshAgent NavAgent Field Value Type Description NavMeshAgent Methods ReachedDestination() Declaration public override bool ReachedDestination() Returns Type Description Boolean Overrides MoveSystemBase.ReachedDestination() SetDestination(Vector3) Declaration public override void SetDestination(Vector3 destination) Parameters Type Name Description Vector3 destination Overrides MoveSystemBase.SetDestination(Vector3) SetProperties(ActionMoveData) Declaration public override void SetProperties(ActionMoveData moveData) Parameters Type Name Description ActionMoveData moveData Overrides MoveSystemBase.SetProperties(ActionMoveData) Stop() Declaration public override void Stop() Overrides MoveSystemBase.Stop()"
  },
  "api/TinnyStudios.AIUtility.StopwatchWatcher.html": {
    "href": "api/TinnyStudios.AIUtility.StopwatchWatcher.html",
    "title": "Class StopwatchWatcher | Utility AI Framework",
    "keywords": "Class StopwatchWatcher An implementation of TimeWatcher as a time counter using Stopwatch. This is used to track how long as action has performed for. Inheritance Object TimeWatcher StopwatchWatcher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public class StopwatchWatcher : TimeWatcher Fields Stopwatch Declaration public Stopwatch Stopwatch Field Value Type Description Stopwatch Methods GetTotalSeconds() Declaration public override double GetTotalSeconds() Returns Type Description Double Overrides TimeWatcher.GetTotalSeconds() Restart() Declaration public override void Restart() Overrides TimeWatcher.Restart() Stop() Declaration public override void Stop() Overrides TimeWatcher.Stop()"
  },
  "api/TinnyStudios.AIUtility.TimeWatcher.html": {
    "href": "api/TinnyStudios.AIUtility.TimeWatcher.html",
    "title": "Class TimeWatcher | Utility AI Framework",
    "keywords": "Class TimeWatcher This is used to track how long as action has performed for. Inheritance Object TimeWatcher StopwatchWatcher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public abstract class TimeWatcher Methods GetTotalSeconds() Declaration public abstract double GetTotalSeconds() Returns Type Description Double Restart() Declaration public abstract void Restart() Stop() Declaration public abstract void Stop()"
  },
  "api/TinnyStudios.AIUtility.UtilityAction.ActionEvents.html": {
    "href": "api/TinnyStudios.AIUtility.UtilityAction.ActionEvents.html",
    "title": "Class UtilityAction.ActionEvents | Utility AI Framework",
    "keywords": "Class UtilityAction.ActionEvents A set of Unity Events that the action can go through. Useful for quick prototypes. Inheritance Object UtilityAction.ActionEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax [Serializable] public class ActionEvents Fields OnAbort Declaration public UnityEvent OnAbort Field Value Type Description UnityEvent OnCompleted Declaration public UnityEvent OnCompleted Field Value Type Description UnityEvent OnMoveBegin Declaration public UnityEvent OnMoveBegin Field Value Type Description UnityEvent OnMoving Declaration public UnityEvent OnMoving Field Value Type Description UnityEvent OnPerform Declaration public UnityEvent OnPerform Field Value Type Description UnityEvent OnPerformBegin Declaration public UnityEvent OnPerformBegin Field Value Type Description UnityEvent OnSetUp Declaration public UnityEvent OnSetUp Field Value Type Description UnityEvent"
  },
  "api/TinnyStudios.AIUtility.UtilityAction.html": {
    "href": "api/TinnyStudios.AIUtility.UtilityAction.html",
    "title": "Class UtilityAction | Utility AI Framework",
    "keywords": "Class UtilityAction The base implementation for Utility Action to be used by the planner. See the interface IUtilityAction for detailed comments. Inheritance Object UtilityAction BuySwordAction EatAction GiveSwordAction SleepAction SwordFightAction WorkAction SpellAttackAction Implements IUtilityAction Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public abstract class UtilityAction : MonoBehaviour, IUtilityAction Fields Considerations Declaration public List<Consideration> Considerations Field Value Type Description List < Consideration > Events Declaration public UtilityAction.ActionEvents Events Field Value Type Description UtilityAction.ActionEvents MinScore Declaration public float MinScore Field Value Type Description Single MoveData Declaration public ActionMoveData MoveData Field Value Type Description ActionMoveData Name Declaration public string Name Field Value Type Description String PerformData Declaration public ActionPerformData PerformData Field Value Type Description ActionPerformData State Declaration public EActionStatus State Field Value Type Description EActionStatus Weight Declaration public float Weight Field Value Type Description Single Properties Agent Declaration public Agent Agent { get; } Property Value Type Description Agent FoldOutEnabled Declaration public bool FoldOutEnabled { get; set; } Property Value Type Description Boolean Initialized Declaration public bool Initialized { get; set; } Property Value Type Description Boolean ReachedPerformDuration Declaration public bool ReachedPerformDuration { get; } Property Value Type Description Boolean Score Declaration public float Score { get; } Property Value Type Description Single TimeWatch Declaration public virtual TimeWatcher TimeWatch { get; } Property Value Type Description TimeWatcher Methods AddConsideration(Consideration) Declaration public void AddConsideration(Consideration consideration) Parameters Type Name Description Consideration consideration InitializeDynamicConsideration() Declaration public virtual void InitializeDynamicConsideration() IsAvailable() Declaration public virtual bool IsAvailable() Returns Type Description Boolean OnConsiderationCheck(Consideration) Declaration public virtual void OnConsiderationCheck(Consideration consideration) Parameters Type Name Description Consideration consideration OnMove(MoveSystemBase) Declaration public virtual void OnMove(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem OnMoveStarted(MoveSystemBase) Declaration public virtual void OnMoveStarted(MoveSystemBase moveSystem) Parameters Type Name Description MoveSystemBase moveSystem OnPerformByDurationCompleted(Agent) Called when Perform By Duration is completed. Override this to execute code after it completes. Declaration protected virtual void OnPerformByDurationCompleted(Agent agent) Parameters Type Name Description Agent agent OnReachedDestination() Declaration public virtual void OnReachedDestination() Perform(Agent) Declaration public abstract EActionStatus Perform(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus PerformByDuration(Agent) While the running elapsed has not reached action perform duration, it'll return Running and keep the action continuing. Pass in any method group to be called on complete. Declaration protected EActionStatus PerformByDuration(Agent agent) Parameters Type Name Description Agent agent Returns Type Description EActionStatus RemoveConsideration(Consideration) Declaration public void RemoveConsideration(Consideration consideration) Parameters Type Name Description Consideration consideration SetScore(Single) Declaration public virtual void SetScore(float score) Parameters Type Name Description Single score SetState(EActionStatus) Declaration public void SetState(EActionStatus state) Parameters Type Name Description EActionStatus state Setup(Agent) Declaration public virtual void Setup(Agent agent) Parameters Type Name Description Agent agent Explicit Interface Implementations IUtilityAction.Considerations Declaration List<Consideration> IUtilityAction.Considerations { get; } Returns Type Description List < Consideration > IUtilityAction.Events Declaration UtilityAction.ActionEvents IUtilityAction.Events { get; } Returns Type Description UtilityAction.ActionEvents IUtilityAction.MoveData Declaration ActionMoveData IUtilityAction.MoveData { get; } Returns Type Description ActionMoveData IUtilityAction.Name Declaration string IUtilityAction.Name { get; } Returns Type Description String IUtilityAction.State Declaration EActionStatus IUtilityAction.State { get; } Returns Type Description EActionStatus IUtilityAction.Weight Declaration float IUtilityAction.Weight { get; } Returns Type Description Single Implements IUtilityAction"
  },
  "api/TinnyStudios.AIUtility.UtilityPlanner.html": {
    "href": "api/TinnyStudios.AIUtility.UtilityPlanner.html",
    "title": "Class UtilityPlanner | Utility AI Framework",
    "keywords": "Class UtilityPlanner Finds the best action based on a list of considerations from Agent Inheritance Object UtilityPlanner Namespace : TinnyStudios.AIUtility Assembly : UtilityAIFramework.dll Syntax public class UtilityPlanner : MonoBehaviour Fields ExecuteEvenZeroScoreActions Declaration public bool ExecuteEvenZeroScoreActions Field Value Type Description Boolean FindActionsOnAwake Declaration public bool FindActionsOnAwake Field Value Type Description Boolean IdleDuration Declaration public float IdleDuration Field Value Type Description Single IncludeInActiveActions Declaration public bool IncludeInActiveActions Field Value Type Description Boolean LogTypes Declaration public EAgentLogType LogTypes Field Value Type Description EAgentLogType Paused Declaration public bool Paused Field Value Type Description Boolean ShowLogs Declaration public bool ShowLogs Field Value Type Description Boolean StartPlanDelay Declaration public float StartPlanDelay Field Value Type Description Single StartPlanOnAwake Declaration public bool StartPlanOnAwake Field Value Type Description Boolean UpdateType Declaration public EUpdateType UpdateType Field Value Type Description EUpdateType Methods GetActionScore(IUtilityAction, Agent) Scores an individual action. Declaration public virtual float GetActionScore(IUtilityAction action, Agent agent) Parameters Type Name Description IUtilityAction action Agent agent Returns Type Description Single GetBestAction(Agent) Returns the best action from agent. Declaration public virtual IUtilityAction GetBestAction(Agent agent) Parameters Type Name Description Agent agent Returns Type Description IUtilityAction GetRescaleScore(IUtilityAction, Single) Get rescale score using Dave's Averaging Scheme. Declaration protected virtual float GetRescaleScore(IUtilityAction action, float score) Parameters Type Name Description IUtilityAction action Single score Returns Type Description Single"
  },
  "index.html": {
    "href": "index.html",
    "title": "Utility AI Framework | Utility AI Framework",
    "keywords": "Utility AI Framework Check out the Wiki for more information, https://www.notion.so/Utility-AI-Framework-43c671997a394454922aa37f604958b9 Click Documentation to API references. Developed by TinnyStudios. Website: TinnyStudios.com Email: Tinnystudios@gmail.com"
  },
  "README.html": {
    "href": "README.html",
    "title": "docfx-seed | Utility AI Framework",
    "keywords": "docfx-seed Description This is a sample docfx documentation project. It contains .NET source code and markdown files. docfx.json is the configuration file for running docfx . docfx will generate a static website as similar to http://docascode.github.io/docfx-seed/index.html How to run Under Windows Install from Nuget Install Nuget.exe Create a folder, e.g. C:\\Tools\\docfx , under the folder, nuget install docfx.console Open command line: set PATH=%PATH%;C:\\Tools\\docfx\\docfx.console\\tools docfx docfx-seed\\docfx.json --serve Install from choco Install chocolatey Open command line: choco install docfx docfx docfx-seed\\docfx.json --serve Cross platform Install Mono Install Nuget.exe > mono nuget.exe install docfx.console > mono docfx.console/tools/docfx.exe docfx-seed/docfx.json Further information about docfx docfx is a tool to generate documentation towards .NET source code and markdown files. Please refer to docfx to get start. The docfx website itself is generated by docfx !"
  }
}